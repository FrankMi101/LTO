'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18047
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18047.
'
Namespace PublishDocumentToSPSite
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PublishDocToSPSoap", [Namespace]:="http://www.tcdsb.org/")>  _
    Partial Public Class PublishDocToSP
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private DocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentByNameAndParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentByCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SLIPPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TCDSB.Student.My.MySettings.Default.TCDSB_Student_SLIPData_PublishDocumentToSPSite_PublishDocToSP
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event DocumentsCompleted As DocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentByNameAndParameterCompleted As DocumentByNameAndParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentByCategoryCompleted As DocumentByCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event SLIPPDFCompleted As SLIPPDFCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tcdsb.org/Documents", RequestNamespace:="http://www.tcdsb.org/", ResponseNamespace:="http://www.tcdsb.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Documents(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _Document As Object) As String
            Dim results() As Object = Me.Invoke("Documents", New Object() {_Type, _schoolyear, _schoolcode, _Document})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentsAsync(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _Document As Object)
            Me.DocumentsAsync(_Type, _schoolyear, _schoolcode, _Document, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentsAsync(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _Document As Object, ByVal userState As Object)
            If (Me.DocumentsOperationCompleted Is Nothing) Then
                Me.DocumentsOperationCompleted = AddressOf Me.OnDocumentsOperationCompleted
            End If
            Me.InvokeAsync("Documents", New Object() {_Type, _schoolyear, _schoolcode, _Document}, Me.DocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentsCompleted(Me, New DocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tcdsb.org/DocumentByNameAndParameter", RequestNamespace:="http://www.tcdsb.org/", ResponseNamespace:="http://www.tcdsb.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentByNameAndParameter(ByVal _Type As String, ByVal reportName As String, ByVal reportParameters As Object, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String) As String
            Dim results() As Object = Me.Invoke("DocumentByNameAndParameter", New Object() {_Type, reportName, reportParameters, _schoolyear, _schoolcode, _schoolName, _schoolBrief})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentByNameAndParameterAsync(ByVal _Type As String, ByVal reportName As String, ByVal reportParameters As Object, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String)
            Me.DocumentByNameAndParameterAsync(_Type, reportName, reportParameters, _schoolyear, _schoolcode, _schoolName, _schoolBrief, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentByNameAndParameterAsync(ByVal _Type As String, ByVal reportName As String, ByVal reportParameters As Object, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal userState As Object)
            If (Me.DocumentByNameAndParameterOperationCompleted Is Nothing) Then
                Me.DocumentByNameAndParameterOperationCompleted = AddressOf Me.OnDocumentByNameAndParameterOperationCompleted
            End If
            Me.InvokeAsync("DocumentByNameAndParameter", New Object() {_Type, reportName, reportParameters, _schoolyear, _schoolcode, _schoolName, _schoolBrief}, Me.DocumentByNameAndParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentByNameAndParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentByNameAndParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentByNameAndParameterCompleted(Me, New DocumentByNameAndParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tcdsb.org/DocumentByCategory", RequestNamespace:="http://www.tcdsb.org/", ResponseNamespace:="http://www.tcdsb.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentByCategory(ByVal _Category As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object) As String
            Dim results() As Object = Me.Invoke("DocumentByCategory", New Object() {_Category, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentByCategoryAsync(ByVal _Category As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object)
            Me.DocumentByCategoryAsync(_Category, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentByCategoryAsync(ByVal _Category As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object, ByVal userState As Object)
            If (Me.DocumentByCategoryOperationCompleted Is Nothing) Then
                Me.DocumentByCategoryOperationCompleted = AddressOf Me.OnDocumentByCategoryOperationCompleted
            End If
            Me.InvokeAsync("DocumentByCategory", New Object() {_Category, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document}, Me.DocumentByCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentByCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentByCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentByCategoryCompleted(Me, New DocumentByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tcdsb.org/SLIPPDF", RequestNamespace:="http://www.tcdsb.org/", ResponseNamespace:="http://www.tcdsb.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SLIPPDF(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object) As String
            Dim results() As Object = Me.Invoke("SLIPPDF", New Object() {_Type, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SLIPPDFAsync(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object)
            Me.SLIPPDFAsync(_Type, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SLIPPDFAsync(ByVal _Type As String, ByVal _schoolyear As String, ByVal _schoolcode As String, ByVal _schoolName As String, ByVal _schoolBrief As String, ByVal _Document As Object, ByVal userState As Object)
            If (Me.SLIPPDFOperationCompleted Is Nothing) Then
                Me.SLIPPDFOperationCompleted = AddressOf Me.OnSLIPPDFOperationCompleted
            End If
            Me.InvokeAsync("SLIPPDF", New Object() {_Type, _schoolyear, _schoolcode, _schoolName, _schoolBrief, _Document}, Me.SLIPPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnSLIPPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.SLIPPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SLIPPDFCompleted(Me, New SLIPPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DocumentByNameAndParameterCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentByNameAndParameterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentByNameAndParameterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DocumentByCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentByCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentByCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SLIPPDFCompletedEventHandler(ByVal sender As Object, ByVal e As SLIPPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SLIPPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
